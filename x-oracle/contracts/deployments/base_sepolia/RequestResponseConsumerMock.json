{
  "address": "0xC31D23d20DA2E32fb94931c2Ef9F62D796D66123",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "coordinator",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "notOwner",
          "type": "address"
        }
      ],
      "name": "OnlyOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "COORDINATOR",
      "outputs": [
        {
          "internalType": "contract IRequestResponseCoordinator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "cancelRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        }
      ],
      "name": "rawFulfillDataRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "response",
          "type": "uint128"
        }
      ],
      "name": "rawFulfillDataRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "response",
          "type": "int256"
        }
      ],
      "name": "rawFulfillDataRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "response",
          "type": "string"
        }
      ],
      "name": "rawFulfillDataRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "response",
          "type": "bool"
        }
      ],
      "name": "rawFulfillDataRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "response",
          "type": "bytes32"
        }
      ],
      "name": "rawFulfillDataRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint8",
          "name": "numSubmission",
          "type": "uint8"
        }
      ],
      "name": "requestDataBool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint8",
          "name": "numSubmission",
          "type": "uint8"
        }
      ],
      "name": "requestDataBytes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint8",
          "name": "numSubmission",
          "type": "uint8"
        }
      ],
      "name": "requestDataBytes32",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint8",
          "name": "numSubmission",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "refundRecipient",
          "type": "address"
        }
      ],
      "name": "requestDataDirectPaymentBool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint8",
          "name": "numSubmission",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "refundRecipient",
          "type": "address"
        }
      ],
      "name": "requestDataDirectPaymentBytes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint8",
          "name": "numSubmission",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "refundRecipient",
          "type": "address"
        }
      ],
      "name": "requestDataDirectPaymentBytes32",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint8",
          "name": "numSubmission",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "refundRecipient",
          "type": "address"
        }
      ],
      "name": "requestDataDirectPaymentInt256",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint8",
          "name": "numSubmission",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "refundRecipient",
          "type": "address"
        }
      ],
      "name": "requestDataDirectPaymentString",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint8",
          "name": "numSubmission",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "refundRecipient",
          "type": "address"
        }
      ],
      "name": "requestDataDirectPaymentUint128",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint8",
          "name": "numSubmission",
          "type": "uint8"
        }
      ],
      "name": "requestDataInt256",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint8",
          "name": "numSubmission",
          "type": "uint8"
        }
      ],
      "name": "requestDataString",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "accId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint8",
          "name": "numSubmission",
          "type": "uint8"
        }
      ],
      "name": "requestDataUint128",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sResponseBool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sResponseBytes",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sResponseBytes32",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sResponseInt256",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sResponseString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sResponseUint128",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x61f43123f484c19d2a13a9819cdedeb42985d57273c03d928a6f5bf99c1b95e4",
  "receipt": {
    "to": null,
    "from": "0x8b736035BbDA71825e0219f5FE4DfB22C35FbDDC",
    "contractAddress": "0xC31D23d20DA2E32fb94931c2Ef9F62D796D66123",
    "transactionIndex": 25,
    "gasUsed": "1823691",
    "logsBloom": "0x
    "blockHash": "0xa667d6e43a96c936f14ed3a993c740d6ab8317c1ddd6ce341f86398bfa1be3b1",
    "transactionHash": "0x61f43123f484c19d2a13a9819cdedeb42985d57273c03d928a6f5bf99c1b95e4",
    "logs": [],
    "blockNumber": 27266150,
    "cumulativeGasUsed": "11422822",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe012c95572096D74966A385b4609cbB5bC376F35"
  ],
  "numDeployments": 1,
  "solcInputHash": "828fa1b778bad7ac1d584cb61e4cf690",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coordinator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"notOwner\",\"type\":\"address\"}],\"name\":\"OnlyOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"COORDINATOR\",\"outputs\":[{\"internalType\":\"contract IRequestResponseCoordinator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"cancelRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"}],\"name\":\"rawFulfillDataRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"response\",\"type\":\"uint128\"}],\"name\":\"rawFulfillDataRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"response\",\"type\":\"int256\"}],\"name\":\"rawFulfillDataRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"response\",\"type\":\"string\"}],\"name\":\"rawFulfillDataRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"response\",\"type\":\"bool\"}],\"name\":\"rawFulfillDataRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"response\",\"type\":\"bytes32\"}],\"name\":\"rawFulfillDataRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"numSubmission\",\"type\":\"uint8\"}],\"name\":\"requestDataBool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"numSubmission\",\"type\":\"uint8\"}],\"name\":\"requestDataBytes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"numSubmission\",\"type\":\"uint8\"}],\"name\":\"requestDataBytes32\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"numSubmission\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"refundRecipient\",\"type\":\"address\"}],\"name\":\"requestDataDirectPaymentBool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"numSubmission\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"refundRecipient\",\"type\":\"address\"}],\"name\":\"requestDataDirectPaymentBytes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"numSubmission\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"refundRecipient\",\"type\":\"address\"}],\"name\":\"requestDataDirectPaymentBytes32\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"numSubmission\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"refundRecipient\",\"type\":\"address\"}],\"name\":\"requestDataDirectPaymentInt256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"numSubmission\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"refundRecipient\",\"type\":\"address\"}],\"name\":\"requestDataDirectPaymentString\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"numSubmission\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"refundRecipient\",\"type\":\"address\"}],\"name\":\"requestDataDirectPaymentUint128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"numSubmission\",\"type\":\"uint8\"}],\"name\":\"requestDataInt256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"numSubmission\",\"type\":\"uint8\"}],\"name\":\"requestDataString\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"accId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"numSubmission\",\"type\":\"uint8\"}],\"name\":\"requestDataUint128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sResponseBool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sResponseBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sResponseBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sResponseInt256\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sResponseString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sResponseUint128\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/mocks/RequestResponseConsumerMock.sol\":\"RequestResponseConsumerMock\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"src/RequestResponseConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"./interfaces/IRequestResponseCoordinator.sol\\\";\\n\\nabstract contract RequestResponseConsumerBase {\\n    using Orakl for Orakl.Request;\\n\\n    error OnlyCoordinatorCanFulfill(address have, address want);\\n\\n    mapping(bytes32 => bytes4) private sJobIdToFunctionSelector;\\n    IRequestResponseCoordinator public immutable COORDINATOR;\\n\\n    /**\\n     * @param _requestResponseCoordinator address of RequestResponseCoordinator contract\\n     */\\n    constructor(address _requestResponseCoordinator) {\\n        COORDINATOR = IRequestResponseCoordinator(_requestResponseCoordinator);\\n\\n        sJobIdToFunctionSelector[keccak256(abi.encodePacked(\\\"uint128\\\"))] = COORDINATOR\\n            .fulfillDataRequestUint128\\n            .selector;\\n        sJobIdToFunctionSelector[keccak256(abi.encodePacked(\\\"int256\\\"))] = COORDINATOR\\n            .fulfillDataRequestInt256\\n            .selector;\\n        sJobIdToFunctionSelector[keccak256(abi.encodePacked(\\\"bool\\\"))] = COORDINATOR\\n            .fulfillDataRequestBool\\n            .selector;\\n        sJobIdToFunctionSelector[keccak256(abi.encodePacked(\\\"string\\\"))] = COORDINATOR\\n            .fulfillDataRequestString\\n            .selector;\\n        sJobIdToFunctionSelector[keccak256(abi.encodePacked(\\\"bytes32\\\"))] = COORDINATOR\\n            .fulfillDataRequestBytes32\\n            .selector;\\n        sJobIdToFunctionSelector[keccak256(abi.encodePacked(\\\"bytes\\\"))] = COORDINATOR\\n            .fulfillDataRequestBytes\\n            .selector;\\n    }\\n\\n    /**\\n     * @notice Build a request using the Orakl library\\n     * @param jobId the job specification ID that the request is created for\\n     * @return req request in memory\\n     */\\n    function buildRequest(bytes32 jobId) internal view returns (Orakl.Request memory req) {\\n        return req.initialize(jobId, address(COORDINATOR), sJobIdToFunctionSelector[jobId]);\\n    }\\n\\n    modifier verifyRawFulfillment() {\\n        address coordinatorAddress = address(COORDINATOR);\\n        if (msg.sender != coordinatorAddress) {\\n            revert OnlyCoordinatorCanFulfill(msg.sender, coordinatorAddress);\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x067ffce4a5c64d0af5f1d0d4de4055d3746a2e1ed960fcee800f67b7fe85b61a\",\"license\":\"MIT\"},\"src/RequestResponseConsumerFulfill.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"./RequestResponseConsumerBase.sol\\\";\\n\\nabstract contract RequestResponseConsumerFulfillUint128 is RequestResponseConsumerBase {\\n    function fulfillDataRequest(uint256 requestId, uint128 response) internal virtual;\\n\\n    function rawFulfillDataRequest(\\n        uint256 requestId,\\n        uint128 response\\n    ) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\\nabstract contract RequestResponseConsumerFulfillInt256 is RequestResponseConsumerBase {\\n    function fulfillDataRequest(uint256 requestId, int256 response) internal virtual;\\n\\n    function rawFulfillDataRequest(\\n        uint256 requestId,\\n        int256 response\\n    ) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\\nabstract contract RequestResponseConsumerFulfillBool is RequestResponseConsumerBase {\\n    function fulfillDataRequest(uint256 requestId, bool response) internal virtual;\\n\\n    function rawFulfillDataRequest(uint256 requestId, bool response) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\\nabstract contract RequestResponseConsumerFulfillString is RequestResponseConsumerBase {\\n    function fulfillDataRequest(uint256 requestId, string memory response) internal virtual;\\n\\n    function rawFulfillDataRequest(\\n        uint256 requestId,\\n        string memory response\\n    ) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\\nabstract contract RequestResponseConsumerFulfillBytes32 is RequestResponseConsumerBase {\\n    function fulfillDataRequest(uint256 requestId, bytes32 response) internal virtual;\\n\\n    function rawFulfillDataRequest(\\n        uint256 requestId,\\n        bytes32 response\\n    ) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\\nabstract contract RequestResponseConsumerFulfillBytes is RequestResponseConsumerBase {\\n    function fulfillDataRequest(uint256 requestId, bytes memory response) internal virtual;\\n\\n    function rawFulfillDataRequest(\\n        uint256 requestId,\\n        bytes memory response\\n    ) external verifyRawFulfillment {\\n        fulfillDataRequest(requestId, response);\\n    }\\n}\\n\",\"keccak256\":\"0x05d2cb95518c33778101579ab9a90853eebb005a9c64639ee8dd947fa5302edd\",\"license\":\"MIT\"},\"src/interfaces/ICoordinatorBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface ICoordinatorBase {\\n    // Fee configuration that separates fees based on the number of\\n    // requests created per account. This applies only to [regular]\\n    // account.\\n    struct FeeConfig {\\n        // Flat fee charged per fulfillment in millionths of KLAY\\n        // So fee range is [0, 2^32/10^6].\\n        uint32 fulfillmentFlatFeeKlayPPMTier1;\\n        uint32 fulfillmentFlatFeeKlayPPMTier2;\\n        uint32 fulfillmentFlatFeeKlayPPMTier3;\\n        uint32 fulfillmentFlatFeeKlayPPMTier4;\\n        uint32 fulfillmentFlatFeeKlayPPMTier5;\\n        uint24 reqsForTier2;\\n        uint24 reqsForTier3;\\n        uint24 reqsForTier4;\\n        uint24 reqsForTier5;\\n    }\\n\\n    /**\\n     * @notice Sets the configuration of the VRF coordinator\\n     * @param maxGasLimit global max for request gas limit\\n     * @param gasAfterPaymentCalculation gas used in doing accounting\\n     * after completing the gas measurement\\n     * @param feeConfig fee tier configuration\\n     */\\n    function setConfig(\\n        uint32 maxGasLimit,\\n        uint32 gasAfterPaymentCalculation,\\n        FeeConfig memory feeConfig\\n    ) external;\\n\\n    /**\\n     * @notice Check to see if there exists a request commitment\\n     * consumers for all consumers and keyhashes for a given acc.\\n     * @param accId - ID of the account\\n     * @return true if there exists at least one unfulfilled request\\n     * for the account, false otherwise.\\n     */\\n    function pendingRequestExists(\\n        address consumer,\\n        uint64 accId,\\n        uint64 nonce\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Get request commitment.\\n     * @param requestId id of request\\n     * @return commmitment value that can be used to determine whether\\n     * a request is fulfilled or not. If `requestId` is valid and\\n     * commitment equals to bytes32(0), the request was fulfilled.\\n     */\\n    function getCommitment(uint256 requestId) external view returns (bytes32);\\n\\n    /**\\n     * @notice Canceling oracle request\\n     * @param requestId - ID of the Oracle Request\\n     */\\n    function cancelRequest(uint256 requestId) external;\\n\\n    /**\\n     * @notice Access address for prepayment associated with\\n     * @notice coordinator.\\n     * @return prepayment address\\n     */\\n    function getPrepaymentAddress() external returns (address);\\n\\n    function estimateFee(\\n        uint64 reqCount,\\n        uint8 numSubmission,\\n        uint32 callbackGasLimit\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x6de51eefb1bee236f7a8144f87c06b804f11375672f41543926a960b9d50f8b5\",\"license\":\"MIT\"},\"src/interfaces/IRequestResponseCoordinator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"./IRequestResponseCoordinatorBase.sol\\\";\\nimport \\\"./ICoordinatorBase.sol\\\";\\n\\ninterface IRequestResponseCoordinator is IRequestResponseCoordinatorBase, ICoordinatorBase {}\\n\",\"keccak256\":\"0x7d924dc529b73fd5c60f0a4d972a12377f15c17fc331a82aa5218897f173d46a\",\"license\":\"MIT\"},\"src/interfaces/IRequestResponseCoordinatorBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"../libraries/Orakl.sol\\\";\\n\\ninterface IRequestResponseCoordinatorBase {\\n    // RequestCommitment holds information sent from off-chain oracle\\n    // describing details of request.\\n    struct RequestCommitment {\\n        uint64 blockNum;\\n        uint64 accId;\\n        uint8 numSubmission;\\n        uint32 callbackGasLimit;\\n        address sender;\\n        bool isDirectPayment;\\n        bytes32 jobId;\\n    }\\n\\n    /**\\n     * @notice Creates a request to RequestResponse oracle using a\\n     * [regular] account.\\n     * @dev Generates and stores a request ID, increments the local\\n     * nonce, creates a request on the target oracle contract.\\n     * @dev Emits Requested event.\\n     * @param req The initialized Request\\n     * @param callbackGasLimit - How much gas you'd like to receive in\\n     * your fulfillRequest callback. Note that gasleft() inside\\n     * fulfillRequest may be slightly less than this amount because of\\n     * gas used calling the function (argument decoding etc.), so you\\n     * may need to request slightly more than you expect to have\\n     * inside fulfillRequest. The acceptable range is [0, maxGasLimit]\\n     * @param accId - The ID of the account. Must be funded with the\\n     * minimum account balance.\\n     * @param numSubmission number of requested submission to compute\\n     * the final aggregate value\\n     @return requestId - A unique * identifier of the request. Can be\\n     used to match a request to a * response in fulfillRequest.\\n     */\\n    function requestData(\\n        Orakl.Request memory req,\\n        uint32 callbackGasLimit,\\n        uint64 accId,\\n        uint8 numSubmission\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Creates a request to RequestResponse oracle using a\\n     * [temporary] account.\\n     * @dev Generates and stores a request ID, increments the local\\n     * nonce, creates a request on the target oracle contract.\\n     * @dev Emits Requested event.\\n     * @param req The initialized Request\\n     * @param callbackGasLimit - How much gas you'd like to receive in\\n     * your fulfillRequest callback. Note that gasleft() inside\\n     * fulfillRequest may be slightly less than this amount because of\\n     * gas used calling the function (argument decoding etc.), so you\\n     * may need to request slightly more than you expect to have\\n     * inside fulfillRequest. The acceptable range is [0, maxGasLimit]\\n     * @param numSubmission number of requested submission to compute\\n     * the final aggregate value\\n     * @param refundRecipient recipient of an extra $KLAY amount that\\n     * was sent together with service request\\n     * @return requestId - A unique identifier of the request. Can be\\n     * used to match a request to a response in fulfillRequest.\\n     */\\n    function requestData(\\n        Orakl.Request memory req,\\n        uint32 callbackGasLimit,\\n        uint8 numSubmission,\\n        address refundRecipient\\n    ) external payable returns (uint256);\\n\\n    function fulfillDataRequestUint128(\\n        uint256 requestId,\\n        uint128 response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    function fulfillDataRequestInt256(\\n        uint256 requestId,\\n        int256 response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    function fulfillDataRequestBool(\\n        uint256 requestId,\\n        bool response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    function fulfillDataRequestString(\\n        uint256 requestId,\\n        string memory response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    function fulfillDataRequestBytes32(\\n        uint256 requestId,\\n        bytes32 response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    function fulfillDataRequestBytes(\\n        uint256 requestId,\\n        bytes memory response,\\n        RequestCommitment memory rc\\n    ) external;\\n\\n    /**\\n     * @notice Different jobs specified by jobId have allowed\\n     * different number of of requests for submissions that depends on\\n     * total number of registered oracles.\\n     */\\n    function validateNumSubmission(bytes32 jobId, uint8 numSubmission) external;\\n}\\n\",\"keccak256\":\"0xfa11f2677b8f2ea43e09077e1c18c22c4430c7630604a3ad4213955710b72a03\",\"license\":\"MIT\"},\"src/libraries/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary Buffer {\\n    /**\\n     * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n     *      a capacity. The capacity may be longer than the current value, in\\n     *      which case it can be extended without the need to allocate more memory.\\n     */\\n    struct buffer {\\n        bytes buf;\\n        uint256 capacity;\\n    }\\n\\n    /**\\n     * @dev Initializes a buffer with an initial capacity.\\n     * @param buf The buffer to initialize.\\n     * @param capacity The number of bytes of space to allocate the buffer.\\n     * @return The buffer, for chaining.\\n     */\\n    function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            mstore(0x40, add(32, add(ptr, capacity)))\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Initializes a new buffer from an existing bytes object.\\n     *      Changes to the buffer may mutate the original value.\\n     * @param b The bytes object to initialize the buffer with.\\n     * @return A new buffer.\\n     */\\n    function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint256 capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    function max(uint256 a, uint256 b) private pure returns (uint256) {\\n        if (a > b) {\\n            return a;\\n        }\\n        return b;\\n    }\\n\\n    /**\\n     * @dev Sets buffer length to 0.\\n     * @param buf The buffer to truncate.\\n     * @return The original buffer, for chaining..\\n     */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The start offset to write to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to copy.\\n     * @return The original buffer, for chaining.\\n     */\\n    function write(\\n        buffer memory buf,\\n        uint256 off,\\n        bytes memory data,\\n        uint256 len\\n    ) internal pure returns (buffer memory) {\\n        require(len <= data.length);\\n\\n        if (off + len > buf.capacity) {\\n            resize(buf, max(buf.capacity, len + off) * 2);\\n        }\\n\\n        uint256 dest;\\n        uint256 src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(add(len, off), buflen) {\\n                mstore(bufptr, add(len, off))\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint256 mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to copy.\\n     * @return The original buffer, for chaining.\\n     */\\n    function append(\\n        buffer memory buf,\\n        bytes memory data,\\n        uint256 len\\n    ) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, data, len);\\n    }\\n\\n    /**\\n     * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, data, data.length);\\n    }\\n\\n    /**\\n     * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n     *      capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The offset to write the byte at.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function writeUint8(\\n        buffer memory buf,\\n        uint256 off,\\n        uint8 data\\n    ) internal pure returns (buffer memory) {\\n        if (off >= buf.capacity) {\\n            resize(buf, buf.capacity * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if eq(off, buflen) {\\n                mstore(bufptr, add(buflen, 1))\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n     *      capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n        return writeUint8(buf, buf.buf.length, data);\\n    }\\n\\n    /**\\n     * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The offset to write at.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (left-aligned).\\n     * @return The original buffer, for chaining.\\n     */\\n    function write(\\n        buffer memory buf,\\n        uint256 off,\\n        bytes32 data,\\n        uint256 len\\n    ) private pure returns (buffer memory) {\\n        if (len + off > buf.capacity) {\\n            resize(buf, (len + off) * 2);\\n        }\\n\\n        unchecked {\\n            uint256 mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + off + len\\n                let dest := add(add(bufptr, off), len)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(add(off, len), mload(bufptr)) {\\n                    mstore(bufptr, add(off, len))\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n     *      capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The offset to write at.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function writeBytes20(\\n        buffer memory buf,\\n        uint256 off,\\n        bytes20 data\\n    ) internal pure returns (buffer memory) {\\n        return write(buf, off, bytes32(data), 20);\\n    }\\n\\n    /**\\n     * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer, for chhaining.\\n     */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, bytes32(data), 20);\\n    }\\n\\n    /**\\n     * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer, for chaining.\\n     */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, data, 32);\\n    }\\n\\n    /**\\n     * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The offset to write at.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer, for chaining.\\n     */\\n    function writeInt(\\n        buffer memory buf,\\n        uint256 off,\\n        uint256 data,\\n        uint256 len\\n    ) private pure returns (buffer memory) {\\n        if (len + off > buf.capacity) {\\n            resize(buf, (len + off) * 2);\\n        }\\n\\n        uint256 mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + off + sizeof(buffer length) + len\\n            let dest := add(add(bufptr, off), len)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(add(off, len), mload(bufptr)) {\\n                mstore(bufptr, add(off, len))\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     * exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @return The original buffer.\\n     */\\n    function appendInt(\\n        buffer memory buf,\\n        uint256 data,\\n        uint256 len\\n    ) internal pure returns (buffer memory) {\\n        return writeInt(buf, buf.buf.length, data, len);\\n    }\\n}\\n\",\"keccak256\":\"0xf343a1ded8171daab55e611796d04c1f00c575dbb7ac9928b3158cf999223b1a\",\"license\":\"MIT\"},\"src/libraries/CBOR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n// https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/vendor/CBORChainlink.sol\\n\\nimport {Buffer} from \\\"./Buffer.sol\\\";\\n\\n// Encoding library for Binary Object Representation\\nlibrary CBOR {\\n    using Buffer for Buffer.buffer;\\n\\n    // DECLARE TYPES FOR EASIER REFERENCE OF VARIABLE TYPE\\n    uint8 private constant MAJOR_TYPE_INT = 0;\\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\\n    uint8 private constant MAJOR_TYPE_STRING = 3;\\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n    uint8 private constant MAJOR_TYPE_MAP = 5;\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n    function encodeFixedNumeric(Buffer.buffer memory buf, uint8 major, uint64 value) private pure {\\n        if (value <= 23) {\\n            buf.appendUint8(uint8((major << 5) | value));\\n        } else if (value <= 0xFF) {\\n            buf.appendUint8(uint8((major << 5) | 24));\\n            buf.appendInt(value, 1);\\n        } else if (value <= 0xFFFF) {\\n            buf.appendUint8(uint8((major << 5) | 25));\\n            buf.appendInt(value, 2);\\n        } else if (value <= 0xFFFFFFFF) {\\n            buf.appendUint8(uint8((major << 5) | 26));\\n            buf.appendInt(value, 4);\\n        } else {\\n            buf.appendUint8(uint8((major << 5) | 27));\\n            buf.appendInt(value, 8);\\n        }\\n    }\\n\\n    function encodeIndefiniteLengthType(Buffer.buffer memory buf, uint8 major) private pure {\\n        buf.appendUint8(uint8((major << 5) | 31));\\n    }\\n\\n    function encodeUInt(Buffer.buffer memory buf, uint value) internal pure {\\n        if (value > 0xFFFFFFFFFFFFFFFF) {\\n            encodeBigNum(buf, value);\\n        } else {\\n            encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n        }\\n    }\\n\\n    function encodeInt(Buffer.buffer memory buf, int value) internal pure {\\n        if (value < -0x10000000000000000) {\\n            encodeSignedBigNum(buf, value);\\n        } else if (value > 0xFFFFFFFFFFFFFFFF) {\\n            encodeBigNum(buf, uint(value));\\n        } else if (value >= 0) {\\n            encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\n        } else {\\n            encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\n        }\\n    }\\n\\n    function encodeBytes(Buffer.buffer memory buf, bytes memory value) internal pure {\\n        encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n        buf.append(value);\\n    }\\n\\n    function encodeBigNum(Buffer.buffer memory buf, uint value) internal pure {\\n        buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n        encodeBytes(buf, abi.encode(value));\\n    }\\n\\n    function encodeSignedBigNum(Buffer.buffer memory buf, int input) internal pure {\\n        buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n        encodeBytes(buf, abi.encode(uint256(-1 - input)));\\n    }\\n\\n    function encodeString(Buffer.buffer memory buf, string memory value) internal pure {\\n        encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n        buf.append(bytes(value));\\n    }\\n\\n    function startArray(Buffer.buffer memory buf) internal pure {\\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n    }\\n\\n    function startMap(Buffer.buffer memory buf) internal pure {\\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n    }\\n\\n    function endSequence(Buffer.buffer memory buf) internal pure {\\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n    }\\n}\\n\",\"keccak256\":\"0x0712ea9c6408a41611eaa5ca843880d7d39c21cfe1dc3efea034bcedf244eae5\",\"license\":\"MIT\"},\"src/libraries/Orakl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n// https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/Chainlink.sol\\n\\nimport {Buffer} from \\\"./Buffer.sol\\\";\\nimport {CBOR} from \\\"./CBOR.sol\\\";\\n\\nlibrary Orakl {\\n    uint256 internal constant defaultBufferSize = 256;\\n\\n    using CBOR for Buffer.buffer;\\n\\n    // structure for storing requests done off-chain\\n    struct Request {\\n        bytes32 id;\\n        address callbackAddr;\\n        bytes4 callbackFunc;\\n        uint256 nonce;\\n        Buffer.buffer buf;\\n    }\\n\\n    /**\\n     * @notice Initializes a request\\n     * @dev Sets ID, callback address, and callback function\\n     * @param self The uninitialized request\\n     * @param jobId The Job Specification ID\\n     * @param callbackAddr The callback address\\n     * @param callbackFunc The callback function signature\\n     * @return The initialized request\\n     */\\n    function initialize(\\n        Request memory self,\\n        bytes32 jobId,\\n        address callbackAddr,\\n        bytes4 callbackFunc\\n    ) internal pure returns (Orakl.Request memory) {\\n        Buffer.init(self.buf, defaultBufferSize);\\n        self.id = jobId;\\n        self.callbackAddr = callbackAddr;\\n        self.callbackFunc = callbackFunc;\\n        return self;\\n    }\\n\\n    /**\\n     * @notice sets the data for buffer\\n     * @param _request the initialized request\\n     * @param _data the CBOR data\\n     */\\n    function setBuffer(Request memory _request, bytes memory _data) internal pure {\\n        Buffer.init(_request.buf, _data.length);\\n        Buffer.append(_request.buf, _data);\\n    }\\n\\n    /**\\n     * @notice Adds a string value to the request in a key - value pair format\\n     * @param self - the initalized request\\n     * @param key - the name of the key\\n     * @param value - the string value to add\\n     */\\n    function add(Request memory self, string memory key, string memory value) internal pure {\\n        self.buf.encodeString(key);\\n        self.buf.encodeString(value);\\n    }\\n\\n    /**\\n     * @notice Adds a byte value to the request in a key - value pair format\\n     * @param _request - the initalized request\\n     * @param _key - the name of the key\\n     * @param _value - the bytes value to add\\n     */\\n    function addBytes(\\n        Request memory _request,\\n        string memory _key,\\n        bytes memory _value\\n    ) internal pure {\\n        _request.buf.encodeString(_key);\\n        _request.buf.encodeBytes(_value);\\n    }\\n\\n    /**\\n     * @notice Adds a Int256 value to the request in a key - value pair format\\n     * @param _request - the initalized request\\n     * @param _key - the name of the key\\n     * @param _value - the int256 value to add\\n     */\\n    function addInt(Request memory _request, string memory _key, int256 _value) internal pure {\\n        _request.buf.encodeString(_key);\\n        _request.buf.encodeInt(_value);\\n    }\\n\\n    /**\\n     * @notice Adds a UInt256 value to the request in a key - value pair format\\n     * @param _request - the initalized request\\n     * @param _key - the name of the key\\n     * @param _value - the uint256 value to add\\n     */\\n    function addUInt(Request memory _request, string memory _key, uint256 _value) internal pure {\\n        _request.buf.encodeString(_key);\\n        _request.buf.encodeUInt(_value);\\n    }\\n\\n    /**\\n     * @notice Adds an array of string value to the request in a key - value pair format\\n     * @param _request - the initalized request\\n     * @param _key - the name of the key\\n     * @param _values - the array of string value to add\\n     */\\n    function addStringArray(\\n        Request memory _request,\\n        string memory _key,\\n        string[] memory _values\\n    ) internal pure {\\n        _request.buf.encodeString(_key);\\n        _request.buf.startArray();\\n        for (uint256 i; i < _values.length; i++) {\\n            _request.buf.encodeString(_values[i]);\\n        }\\n        _request.buf.endSequence();\\n    }\\n}\\n\",\"keccak256\":\"0xd03570ddd458085535e258f75d684f76b2adbac7fccb718d11977562d4f3101a\",\"license\":\"MIT\"},\"src/mocks/RequestResponseConsumerMock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"../RequestResponseConsumerFulfill.sol\\\";\\nimport \\\"../RequestResponseConsumerBase.sol\\\";\\n\\ncontract RequestResponseConsumerMock is\\n    RequestResponseConsumerFulfillUint128,\\n    RequestResponseConsumerFulfillInt256,\\n    RequestResponseConsumerFulfillBool,\\n    RequestResponseConsumerFulfillString,\\n    RequestResponseConsumerFulfillBytes32,\\n    RequestResponseConsumerFulfillBytes\\n{\\n    using Orakl for Orakl.Request;\\n    uint128 public sResponseUint128;\\n    int256 public sResponseInt256;\\n    bool public sResponseBool;\\n    string public sResponseString;\\n    bytes32 public sResponseBytes32;\\n    bytes public sResponseBytes;\\n\\n    address private sOwner;\\n\\n    error OnlyOwner(address notOwner);\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != sOwner) {\\n            revert OnlyOwner(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    constructor(address coordinator) RequestResponseConsumerBase(coordinator) {\\n        sOwner = msg.sender;\\n    }\\n\\n    // Receive remaining payment from requestDataPayment\\n    receive() external payable {}\\n\\n    //request for uint128\\n    function requestDataUint128(\\n        uint64 accId,\\n        uint32 callbackGasLimit,\\n        uint8 numSubmission\\n    ) public onlyOwner returns (uint256 requestId) {\\n        bytes32 jobId = keccak256(abi.encodePacked(\\\"uint128\\\"));\\n        Orakl.Request memory req = buildRequest(jobId);\\n        //change here for your expected data\\n        req.add(\\\"get\\\", \\\"https://min-api.cryptocompare.com/data/pricemultifull?fsyms=BTC&tsyms=USD\\\");\\n        req.add(\\\"path\\\", \\\"RAW,BTC,USD,PRICE\\\");\\n        req.add(\\\"pow10\\\", \\\"8\\\");\\n\\n        requestId = COORDINATOR.requestData(req, callbackGasLimit, accId, numSubmission);\\n    }\\n\\n    function requestDataDirectPaymentUint128(\\n        uint32 callbackGasLimit,\\n        uint8 numSubmission,\\n        address refundRecipient\\n    ) public payable onlyOwner returns (uint256 requestId) {\\n        bytes32 jobId = keccak256(abi.encodePacked(\\\"uint128\\\"));\\n        Orakl.Request memory req = buildRequest(jobId);\\n        //change here for your expected data\\n        req.add(\\\"get\\\", \\\"https://min-api.cryptocompare.com/data/pricemultifull?fsyms=BTC&tsyms=USD\\\");\\n        req.add(\\\"path\\\", \\\"RAW,BTC,USD,PRICE\\\");\\n        req.add(\\\"pow10\\\", \\\"8\\\");\\n\\n        requestId = COORDINATOR.requestData{value: msg.value}(\\n            req,\\n            callbackGasLimit,\\n            numSubmission,\\n            refundRecipient\\n        );\\n    }\\n\\n    // request for int256\\n    function requestDataInt256(\\n        uint64 accId,\\n        uint32 callbackGasLimit,\\n        uint8 numSubmission\\n    ) public onlyOwner returns (uint256 requestId) {\\n        bytes32 jobId = keccak256(abi.encodePacked(\\\"int256\\\"));\\n        Orakl.Request memory req = buildRequest(jobId);\\n        //change here for your expected data\\n        req.add(\\\"get\\\", \\\"https://min-api.cryptocompare.com/data/pricemultifull?fsyms=BTC&tsyms=USD\\\");\\n        req.add(\\\"path\\\", \\\"RAW,BTC,USD,PRICE\\\");\\n        req.add(\\\"pow10\\\", \\\"8\\\");\\n\\n        requestId = COORDINATOR.requestData(req, callbackGasLimit, accId, numSubmission);\\n    }\\n\\n    function requestDataDirectPaymentInt256(\\n        uint32 callbackGasLimit,\\n        uint8 numSubmission,\\n        address refundRecipient\\n    ) public payable onlyOwner returns (uint256 requestId) {\\n        bytes32 jobId = keccak256(abi.encodePacked(\\\"int256\\\"));\\n        Orakl.Request memory req = buildRequest(jobId);\\n        //change here for your expected data\\n        req.add(\\\"get\\\", \\\"https://min-api.cryptocompare.com/data/pricemultifull?fsyms=BTC&tsyms=USD\\\");\\n        req.add(\\\"path\\\", \\\"RAW,BTC,USD,PRICE\\\");\\n        req.add(\\\"pow10\\\", \\\"8\\\");\\n\\n        requestId = COORDINATOR.requestData{value: msg.value}(\\n            req,\\n            callbackGasLimit,\\n            numSubmission,\\n            refundRecipient\\n        );\\n    }\\n\\n    // request for bool\\n    function requestDataBool(\\n        uint64 accId,\\n        uint32 callbackGasLimit,\\n        uint8 numSubmission\\n    ) public onlyOwner returns (uint256 requestId) {\\n        bytes32 jobId = keccak256(abi.encodePacked(\\\"bool\\\"));\\n        Orakl.Request memory req = buildRequest(jobId);\\n        req.add(\\\"get\\\", \\\"https://min-api.cryptocompare.com/data/pricemultifull?fsyms=BTC&tsyms=USD\\\");\\n        req.add(\\\"path\\\", \\\"RAW,BTC,USD,PRICE\\\");\\n        req.add(\\\"pow10\\\", \\\"8\\\");\\n\\n        requestId = COORDINATOR.requestData(req, callbackGasLimit, accId, numSubmission);\\n    }\\n\\n    function requestDataDirectPaymentBool(\\n        uint32 callbackGasLimit,\\n        uint8 numSubmission,\\n        address refundRecipient\\n    ) public payable onlyOwner returns (uint256 requestId) {\\n        bytes32 jobId = keccak256(abi.encodePacked(\\\"bool\\\"));\\n        Orakl.Request memory req = buildRequest(jobId);\\n        //change here for your expected data\\n        req.add(\\n            \\\"get\\\",\\n            \\\"https://min-api.cryptocompare.com/data/pricemultifull?fsyms=BTC &tsyms=USD\\\"\\n        );\\n        req.add(\\\"path\\\", \\\"RAW,BTC,USD,PRICE\\\");\\n        req.add(\\\"pow10\\\", \\\"8\\\");\\n\\n        requestId = COORDINATOR.requestData{value: msg.value}(\\n            req,\\n            callbackGasLimit,\\n            numSubmission,\\n            refundRecipient\\n        );\\n    }\\n\\n    // request for string\\n    function requestDataString(\\n        uint64 accId,\\n        uint32 callbackGasLimit,\\n        uint8 numSubmission\\n    ) public onlyOwner returns (uint256 requestId) {\\n        bytes32 jobId = keccak256(abi.encodePacked(\\\"string\\\"));\\n        Orakl.Request memory req = buildRequest(jobId);\\n        req.add(\\\"get\\\", \\\"https://min-api.cryptocompare.com/data/pricemultifull?fsyms=BTC&tsyms=USD\\\");\\n        req.add(\\\"path\\\", \\\"RAW,BTC,USD,PRICE\\\");\\n        req.add(\\\"pow10\\\", \\\"8\\\");\\n\\n        requestId = COORDINATOR.requestData(req, callbackGasLimit, accId, numSubmission);\\n    }\\n\\n    function requestDataDirectPaymentString(\\n        uint32 callbackGasLimit,\\n        uint8 numSubmission,\\n        address refundRecipient\\n    ) public payable onlyOwner returns (uint256 requestId) {\\n        bytes32 jobId = keccak256(abi.encodePacked(\\\"string\\\"));\\n        Orakl.Request memory req = buildRequest(jobId);\\n        req.add(\\\"get\\\", \\\"https://min-api.cryptocompare.com/data/pricemultifull?fsyms=BTC&tsyms=USD\\\");\\n        req.add(\\\"path\\\", \\\"RAW,BTC,USD,PRICE\\\");\\n        req.add(\\\"pow10\\\", \\\"8\\\");\\n\\n        requestId = COORDINATOR.requestData{value: msg.value}(\\n            req,\\n            callbackGasLimit,\\n            numSubmission,\\n            refundRecipient\\n        );\\n    }\\n\\n    // request for bytes32\\n    function requestDataBytes32(\\n        uint64 accId,\\n        uint32 callbackGasLimit,\\n        uint8 numSubmission\\n    ) public onlyOwner returns (uint256 requestId) {\\n        bytes32 jobId = keccak256(abi.encodePacked(\\\"bytes32\\\"));\\n        Orakl.Request memory req = buildRequest(jobId);\\n        req.add(\\\"get\\\", \\\"https://min-api.cryptocompare.com/data/pricemultifull?fsyms=BTC&tsyms=USD\\\");\\n        req.add(\\\"path\\\", \\\"RAW,BTC,USD,PRICE\\\");\\n        req.add(\\\"pow10\\\", \\\"8\\\");\\n\\n        requestId = COORDINATOR.requestData(req, callbackGasLimit, accId, numSubmission);\\n    }\\n\\n    function requestDataDirectPaymentBytes32(\\n        uint32 callbackGasLimit,\\n        uint8 numSubmission,\\n        address refundRecipient\\n    ) public payable onlyOwner returns (uint256 requestId) {\\n        bytes32 jobId = keccak256(abi.encodePacked(\\\"bytes32\\\"));\\n        Orakl.Request memory req = buildRequest(jobId);\\n        req.add(\\\"get\\\", \\\"https://min-api.cryptocompare.com/data/pricemultifull?fsyms=BTC&tsyms=USD\\\");\\n        req.add(\\\"path\\\", \\\"RAW,BTC,USD,PRICE\\\");\\n        req.add(\\\"pow10\\\", \\\"8\\\");\\n\\n        requestId = COORDINATOR.requestData{value: msg.value}(\\n            req,\\n            callbackGasLimit,\\n            numSubmission,\\n            refundRecipient\\n        );\\n    }\\n\\n    // request for bytes\\n    function requestDataBytes(\\n        uint64 accId,\\n        uint32 callbackGasLimit,\\n        uint8 numSubmission\\n    ) public onlyOwner returns (uint256 requestId) {\\n        bytes32 jobId = keccak256(abi.encodePacked(\\\"bytes\\\"));\\n        Orakl.Request memory req = buildRequest(jobId);\\n        req.add(\\\"get\\\", \\\"https://min-api.cryptocompare.com/data/pricemultifull?fsyms=BTC&tsyms=USD\\\");\\n        req.add(\\\"path\\\", \\\"RAW,BTC,USD,PRICE\\\");\\n        req.add(\\\"pow10\\\", \\\"8\\\");\\n\\n        requestId = COORDINATOR.requestData(req, callbackGasLimit, accId, numSubmission);\\n    }\\n\\n    function requestDataDirectPaymentBytes(\\n        uint32 callbackGasLimit,\\n        uint8 numSubmission,\\n        address refundRecipient\\n    ) public payable onlyOwner returns (uint256 requestId) {\\n        bytes32 jobId = keccak256(abi.encodePacked(\\\"bytes\\\"));\\n        Orakl.Request memory req = buildRequest(jobId);\\n        req.add(\\\"get\\\", \\\"https://min-api.cryptocompare.com/data/pricemultifull?fsyms=BTC&tsyms=USD\\\");\\n        req.add(\\\"path\\\", \\\"RAW,BTC,USD,PRICE\\\");\\n        req.add(\\\"pow10\\\", \\\"8\\\");\\n\\n        requestId = COORDINATOR.requestData{value: msg.value}(\\n            req,\\n            callbackGasLimit,\\n            numSubmission,\\n            refundRecipient\\n        );\\n    }\\n\\n    function fulfillDataRequest(uint256 /*requestId*/, uint128 response) internal override {\\n        sResponseUint128 = response;\\n    }\\n\\n    function fulfillDataRequest(uint256 /*requestId*/, int256 response) internal override {\\n        sResponseInt256 = response;\\n    }\\n\\n    function fulfillDataRequest(uint256 /*requestId*/, bool response) internal override {\\n        sResponseBool = response;\\n    }\\n\\n    function fulfillDataRequest(uint256 /*requestId*/, string memory response) internal override {\\n        sResponseString = response;\\n    }\\n\\n    function fulfillDataRequest(uint256 /*requestId*/, bytes32 response) internal override {\\n        sResponseBytes32 = response;\\n    }\\n\\n    function fulfillDataRequest(uint256 /*requestId*/, bytes memory response) internal override {\\n        sResponseBytes = response;\\n    }\\n\\n    function cancelRequest(uint256 requestId) external onlyOwner {\\n        COORDINATOR.cancelRequest(requestId);\\n    }\\n}\\n\",\"keccak256\":\"0x1774b27bf6e9e0185f8de2b2e7048643851020c1b2fef3eb29aa3480208ffee3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051611f78380380611f7883398101604081905261002f916101c5565b6001600160a01b031660805260408051660ead2dce86264760cb1b6020808301919091528251808303600790810182526027840185528151918301919091206000908152808352848120805463ffffffff1990811663a185c35f179091556534b73a191a9b60d11b60478601528551808603602d018152604d8601875280519085012082528184528582208054821663d1bf555c17905563189bdbdb60e21b606d86015285518086036051018152607186018752805190850120825281845285822080548216637961841717905565737472696e6760d01b60918601528551808603607701815260978601875280519085012082528184528582208054821663f30be55117905566313cba32b9999960c91b60b78601528551808603609e01815260be8601875280519085012082528184528582208054821663bf8542a917905564627974657360d81b60de860152855180860360c301815260e39095018652845194840194909420815291829052929020805463c6f34013921691909117905580546001600160a01b031916331790556101f5565b6000602082840312156101d757600080fd5b81516001600160a01b03811681146101ee57600080fd5b9392505050565b608051611d22610256600039600081816102b60152818161068f0152818161098301528181610a0301528181610ac701528181610b8b01528181610d1d01528181610d7f01528181610eca0152818161102101526110d80152611d226000f3fe6080604052600436106101a55760003560e01c80635cdb7f7b116100e15780638d1550961161008a578063cdac274d11610064578063cdac274d1461046b578063ee61f30a1461047e578063efcb1e7914610491578063f40b4def146104db57600080fd5b80638d1550961461041857806390d95efc1461042b578063cd9a4e291461044b57600080fd5b80637b3d2ce9116100bb5780637b3d2ce9146103c257806386314c7a146103e257806387082111146103f857600080fd5b80635cdb7f7b1461036f5780636e2acda01461038257806379b15008146103a257600080fd5b80633015394c1161014e5780633b68dad0116101285780633b68dad0146102f057806343ff5be11461030557806345b9b6fb1461032f5780635215b9d81461034f57600080fd5b80633015394c1461026457806334ed9593146102845780633b2bcbf1146102a457600080fd5b806314f5c3831161017f57806314f5c3831461020c5780631569e5d61461022257806319e2cd2f1461024257600080fd5b806303f2d723146101b15780630598cf45146101d7578063144eb1e8146101ea57600080fd5b366101ac57005b600080fd5b6101c46101bf3660046115f7565b6104fb565b6040519081526020015b60405180910390f35b6101c46101e53660046115f7565b610719565b3480156101f657600080fd5b506101ff610766565b6040516101ce9190611690565b34801561021857600080fd5b506101c460025481565b34801561022e57600080fd5b506101c461023d3660046116a3565b6107f4565b34801561024e57600080fd5b5061026261025d366004611781565b610a01565b005b34801561027057600080fd5b5061026261027f3660046117dc565b610a6b565b34801561029057600080fd5b506101c461029f3660046116a3565b610b2e565b3480156102b057600080fd5b506102d87f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101ce565b3480156102fc57600080fd5b506101ff610b7c565b34801561031157600080fd5b5060035461031f9060ff1681565b60405190151581526020016101ce565b34801561033b57600080fd5b5061026261034a3660046117f5565b610b89565b34801561035b57600080fd5b506101c461036a3660046116a3565b610c25565b6101c461037d3660046115f7565b610c70565b34801561038e57600080fd5b5061026261039d36600461183a565b610d1b565b3480156103ae57600080fd5b506102626103bd366004611781565b610d7d565b3480156103ce57600080fd5b506101c46103dd3660046116a3565b610de2565b3480156103ee57600080fd5b506101c460055481565b34801561040457600080fd5b506101c46104133660046116a3565b610e2e565b6101c46104263660046115f7565b610e7c565b34801561043757600080fd5b5061026261044636600461185c565b610ec8565b34801561045757600080fd5b506101c46104663660046116a3565b610f36565b6101c46104793660046115f7565b610f83565b6101c461048c3660046115f7565b610fd1565b34801561049d57600080fd5b506001546104ba906fffffffffffffffffffffffffffffffff1681565b6040516fffffffffffffffffffffffffffffffff90911681526020016101ce565b3480156104e757600080fd5b506102626104f636600461183a565b61101f565b6007546000906001600160a01b0316331461053057604051630543601560e11b81523360048201526024015b60405180910390fd5b60405165737472696e6760d01b60208201526000906026015b604051602081830303815290604052805190602001209050600061056c82611081565b90506105ae6040518060400160405280600381526020016219d95d60ea1b815250604051806080016040528060498152602001611ca460499139839190611106565b610614604051806040016040528060048152602001630e0c2e8d60e31b8152506040518060400160405280601181526020017f5241572c4254432c5553442c5052494345000000000000000000000000000000815250836111069092919063ffffffff16565b61065f604051806040016040528060058152602001640706f7731360dc1b815250604051806040016040528060018152602001600760fb1b815250836111069092919063ffffffff16565b6040517fa4dfe92f0000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a4dfe92f9034906106cc9085908b908b908b9060040161190e565b60206040518083038185885af11580156106ea573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061070f919061194f565b9695505050505050565b6007546000906001600160a01b0316331461074957604051630543601560e11b8152336004820152602401610527565b6040516534b73a191a9b60d11b6020820152600090602601610549565b6006805461077390611968565b80601f016020809104026020016040519081016040528092919081815260200182805461079f90611968565b80156107ec5780601f106107c1576101008083540402835291602001916107ec565b820191906000526020600020905b8154815290600101906020018083116107cf57829003601f168201915b505050505081565b6007546000906001600160a01b0316331461082457604051630543601560e11b8152336004820152602401610527565b6040516534b73a191a9b60d11b60208201526000906026015b604051602081830303815290604052805190602001209050600061086082611081565b90506108a26040518060400160405280600381526020016219d95d60ea1b815250604051806080016040528060498152602001611ca460499139839190611106565b610908604051806040016040528060048152602001630e0c2e8d60e31b8152506040518060400160405280601181526020017f5241572c4254432c5553442c5052494345000000000000000000000000000000815250836111069092919063ffffffff16565b610953604051806040016040528060058152602001640706f7731360dc1b815250604051806040016040528060018152602001600760fb1b815250836111069092919063ffffffff16565b6040517f752f8c140000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063752f8c14906109be90849089908b908a9060040161199c565b6020604051808303816000875af11580156109dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070f919061194f565b7f0000000000000000000000000000000000000000000000000000000000000000336001600160a01b03821614610a5c5760405163073e64fd60e21b81523360048201526001600160a01b0382166024820152604401610527565b610a668383611124565b505050565b6007546001600160a01b03163314610a9857604051630543601560e11b8152336004820152602401610527565b6040517f3015394c000000000000000000000000000000000000000000000000000000008152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690633015394c90602401600060405180830381600087803b158015610b1357600080fd5b505af1158015610b27573d6000803e3d6000fd5b5050505050565b6007546000906001600160a01b03163314610b5e57604051630543601560e11b8152336004820152602401610527565b604051660ead2dce86264760cb1b602082015260009060270161083d565b6004805461077390611968565b7f0000000000000000000000000000000000000000000000000000000000000000336001600160a01b03821614610be45760405163073e64fd60e21b81523360048201526001600160a01b0382166024820152604401610527565b600180547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff8416179055505050565b6007546000906001600160a01b03163314610c5557604051630543601560e11b8152336004820152602401610527565b60405163189bdbdb60e21b602082015260009060240161083d565b6007546000906001600160a01b03163314610ca057604051630543601560e11b8152336004820152602401610527565b60405163189bdbdb60e21b60208201526000906024016040516020818303038152906040528051906020012090506000610cd982611081565b90506105ae6040518060400160405280600381526020016219d95d60ea1b8152506040518060800160405280604a8152602001611c5a604a9139839190611106565b7f0000000000000000000000000000000000000000000000000000000000000000336001600160a01b03821614610d765760405163073e64fd60e21b81523360048201526001600160a01b0382166024820152604401610527565b5060025550565b7f0000000000000000000000000000000000000000000000000000000000000000336001600160a01b03821614610dd85760405163073e64fd60e21b81523360048201526001600160a01b0382166024820152604401610527565b610a668383611130565b6007546000906001600160a01b03163314610e1257604051630543601560e11b8152336004820152602401610527565b60405164627974657360d81b602082015260009060250161083d565b6007546000906001600160a01b03163314610e5e57604051630543601560e11b8152336004820152602401610527565b60405166313cba32b9999960c91b602082015260009060270161083d565b6007546000906001600160a01b03163314610eac57604051630543601560e11b8152336004820152602401610527565b60405164627974657360d81b6020820152600090602501610549565b7f0000000000000000000000000000000000000000000000000000000000000000336001600160a01b03821614610f235760405163073e64fd60e21b81523360048201526001600160a01b0382166024820152604401610527565b6003805460ff1916831515179055505050565b6007546000906001600160a01b03163314610f6657604051630543601560e11b8152336004820152602401610527565b60405165737472696e6760d01b602082015260009060260161083d565b6007546000906001600160a01b03163314610fb357604051630543601560e11b8152336004820152602401610527565b60405166313cba32b9999960c91b6020820152600090602701610549565b6007546000906001600160a01b0316331461100157604051630543601560e11b8152336004820152602401610527565b604051660ead2dce86264760cb1b6020820152600090602701610549565b7f0000000000000000000000000000000000000000000000000000000000000000336001600160a01b0382161461107a5760405163073e64fd60e21b81523360048201526001600160a01b0382166024820152604401610527565b5060055550565b6110bf6040805160a0810182526000808252602080830182905282840182905260608084018390528451808601909552845283015290608082015290565b60008281526020819052604090205461110090829084907f00000000000000000000000000000000000000000000000000000000000000009060e01b61113c565b92915050565b608083015161111590836111c7565b6080830151610a6690826111c7565b6006610a668282611a2c565b6004610a668282611a2c565b61117a6040805160a0810182526000808252602080830182905282840182905260608084018390528451808601909552845283015290608082015290565b61118a85608001516101006111de565b50509183526001600160a01b031660208301527fffffffff0000000000000000000000000000000000000000000000000000000016604082015290565b6111d48260038351611243565b610a668282611358565b6040805180820190915260608152600060208201526111fe602083611aec565b156112265761120e602083611aec565b611219906020611b24565b6112239083611b37565b91505b506020828101829052604080518085526000815290920101905290565b60178167ffffffffffffffff161161126e576112688360e0600585901b168317611386565b50505050565b60ff8167ffffffffffffffff16116112ac57611295836018611fe0600586901b1617611386565b506112688367ffffffffffffffff831660016113ab565b61ffff8167ffffffffffffffff16116112eb576112d4836019611fe0600586901b1617611386565b506112688367ffffffffffffffff831660026113ab565b63ffffffff8167ffffffffffffffff161161132c5761131583601a611fe0600586901b1617611386565b506112688367ffffffffffffffff831660046113ab565b61134183601b611fe0600586901b1617611386565b506112688367ffffffffffffffff831660086113ab565b60408051808201909152606081526000602082015261137f838460000151518485516113d9565b9392505050565b60408051808201909152606081526000602082015261137f83846000015151846114c3565b6040805180820190915260608152600060208201526113d184856000015151858561151e565b949350505050565b60408051808201909152606081526000602082015282518211156113fc57600080fd5b602085015161140b8386611b37565b111561143e5761143e8561142e876020015187866114299190611b37565b61159f565b611439906002611b4a565b6115b6565b60008086518051876020830101935080888701111561145d5787860182525b505050602084015b6020841061149d578051825261147c602083611b37565b9150611489602082611b37565b9050611496602085611b24565b9350611465565b51815160001960208690036101000a019081169019919091161790525083949350505050565b604080518082019091526060815260006020820152836020015183106114f8576114f884856020015160026114399190611b4a565b8351805160208583010184815350808503611514576001810182525b5093949350505050565b60408051808201909152606081526000602082015260208501516115428584611b37565b1115611556576115568561142e8685611b37565b6000600161156684610100611c4d565b6115709190611b24565b90508551838682010185831982511617815250805184870111156115945783860181525b509495945050505050565b6000818311156115b0575081611100565b50919050565b81516115c283836111de565b506112688382611358565b803563ffffffff811681146115e157600080fd5b919050565b803560ff811681146115e157600080fd5b60008060006060848603121561160c57600080fd5b611615846115cd565b9250611623602085016115e6565b915060408401356001600160a01b038116811461163f57600080fd5b809150509250925092565b6000815180845260005b8181101561167057602081850181015186830182015201611654565b506000602082860101526020601f19601f83011685010191505092915050565b60208152600061137f602083018461164a565b6000806000606084860312156116b857600080fd5b833567ffffffffffffffff811681146116d057600080fd5b92506116de602085016115cd565b91506116ec604085016115e6565b90509250925092565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115611726576117266116f5565b604051601f8501601f19908116603f0116810190828211818310171561174e5761174e6116f5565b8160405280935085815286868601111561176757600080fd5b858560208301376000602087830101525050509392505050565b6000806040838503121561179457600080fd5b82359150602083013567ffffffffffffffff8111156117b257600080fd5b8301601f810185136117c357600080fd5b6117d28582356020840161170b565b9150509250929050565b6000602082840312156117ee57600080fd5b5035919050565b6000806040838503121561180857600080fd5b8235915060208301356fffffffffffffffffffffffffffffffff8116811461182f57600080fd5b809150509250929050565b6000806040838503121561184d57600080fd5b50508035926020909101359150565b6000806040838503121561186f57600080fd5b823591506020830135801515811461182f57600080fd5b805182526001600160a01b0360208201511660208301527fffffffff000000000000000000000000000000000000000000000000000000006040820151166040830152606081015160608301526000608082015160a060808501528051604060a08601526118f760e086018261164a565b9050602082015160c0860152809250505092915050565b6080815260006119216080830187611886565b63ffffffff9590951660208301525060ff9290921660408301526001600160a01b0316606090910152919050565b60006020828403121561196157600080fd5b5051919050565b600181811c9082168061197c57607f821691505b6020821081036115b057634e487b7160e01b600052602260045260246000fd5b6080815260006119af6080830187611886565b63ffffffff9590951660208301525067ffffffffffffffff92909216604083015260ff16606090910152919050565b601f821115610a6657600081815260208120601f850160051c81016020861015611a055750805b601f850160051c820191505b81811015611a2457828155600101611a11565b505050505050565b815167ffffffffffffffff811115611a4657611a466116f5565b611a5a81611a548454611968565b846119de565b602080601f831160018114611a8f5760008415611a775750858301515b600019600386901b1c1916600185901b178555611a24565b600085815260208120601f198616915b82811015611abe57888601518255948401946001909101908401611a9f565b5085821015611adc5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600082611b0957634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b8181038181111561110057611100611b0e565b8082018082111561110057611100611b0e565b6000816000190483118215151615611b6457611b64611b0e565b500290565b600181815b80851115611ba4578160001904821115611b8a57611b8a611b0e565b80851615611b9757918102915b93841c9390800290611b6e565b509250929050565b600082611bbb57506001611100565b81611bc857506000611100565b8160018114611bde5760028114611be857611c04565b6001915050611100565b60ff841115611bf957611bf9611b0e565b50506001821b611100565b5060208310610133831016604e8410600b8410161715611c27575081810a611100565b611c318383611b69565b8060001904821115611c4557611c45611b0e565b029392505050565b600061137f8383611bac56fe68747470733a2f2f6d696e2d6170692e63727970746f636f6d706172652e636f6d2f646174612f70726963656d756c746966756c6c3f6673796d733d42544320267473796d733d55534468747470733a2f2f6d696e2d6170692e63727970746f636f6d706172652e636f6d2f646174612f70726963656d756c746966756c6c3f6673796d733d425443267473796d733d555344a26469706673582212203ebc21da5fe7f4c21337a336f60954074cf8da50d35d05ef759e1939c54e492f64736f6c63430008100033",
  "deployedBytecode": "0x6080604052600436106101a55760003560e01c80635cdb7f7b116100e15780638d1550961161008a578063cdac274d11610064578063cdac274d1461046b578063ee61f30a1461047e578063efcb1e7914610491578063f40b4def146104db57600080fd5b80638d1550961461041857806390d95efc1461042b578063cd9a4e291461044b57600080fd5b80637b3d2ce9116100bb5780637b3d2ce9146103c257806386314c7a146103e257806387082111146103f857600080fd5b80635cdb7f7b1461036f5780636e2acda01461038257806379b15008146103a257600080fd5b80633015394c1161014e5780633b68dad0116101285780633b68dad0146102f057806343ff5be11461030557806345b9b6fb1461032f5780635215b9d81461034f57600080fd5b80633015394c1461026457806334ed9593146102845780633b2bcbf1146102a457600080fd5b806314f5c3831161017f57806314f5c3831461020c5780631569e5d61461022257806319e2cd2f1461024257600080fd5b806303f2d723146101b15780630598cf45146101d7578063144eb1e8146101ea57600080fd5b366101ac57005b600080fd5b6101c46101bf3660046115f7565b6104fb565b6040519081526020015b60405180910390f35b6101c46101e53660046115f7565b610719565b3480156101f657600080fd5b506101ff610766565b6040516101ce9190611690565b34801561021857600080fd5b506101c460025481565b34801561022e57600080fd5b506101c461023d3660046116a3565b6107f4565b34801561024e57600080fd5b5061026261025d366004611781565b610a01565b005b34801561027057600080fd5b5061026261027f3660046117dc565b610a6b565b34801561029057600080fd5b506101c461029f3660046116a3565b610b2e565b3480156102b057600080fd5b506102d87f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101ce565b3480156102fc57600080fd5b506101ff610b7c565b34801561031157600080fd5b5060035461031f9060ff1681565b60405190151581526020016101ce565b34801561033b57600080fd5b5061026261034a3660046117f5565b610b89565b34801561035b57600080fd5b506101c461036a3660046116a3565b610c25565b6101c461037d3660046115f7565b610c70565b34801561038e57600080fd5b5061026261039d36600461183a565b610d1b565b3480156103ae57600080fd5b506102626103bd366004611781565b610d7d565b3480156103ce57600080fd5b506101c46103dd3660046116a3565b610de2565b3480156103ee57600080fd5b506101c460055481565b34801561040457600080fd5b506101c46104133660046116a3565b610e2e565b6101c46104263660046115f7565b610e7c565b34801561043757600080fd5b5061026261044636600461185c565b610ec8565b34801561045757600080fd5b506101c46104663660046116a3565b610f36565b6101c46104793660046115f7565b610f83565b6101c461048c3660046115f7565b610fd1565b34801561049d57600080fd5b506001546104ba906fffffffffffffffffffffffffffffffff1681565b6040516fffffffffffffffffffffffffffffffff90911681526020016101ce565b3480156104e757600080fd5b506102626104f636600461183a565b61101f565b6007546000906001600160a01b0316331461053057604051630543601560e11b81523360048201526024015b60405180910390fd5b60405165737472696e6760d01b60208201526000906026015b604051602081830303815290604052805190602001209050600061056c82611081565b90506105ae6040518060400160405280600381526020016219d95d60ea1b815250604051806080016040528060498152602001611ca460499139839190611106565b610614604051806040016040528060048152602001630e0c2e8d60e31b8152506040518060400160405280601181526020017f5241572c4254432c5553442c5052494345000000000000000000000000000000815250836111069092919063ffffffff16565b61065f604051806040016040528060058152602001640706f7731360dc1b815250604051806040016040528060018152602001600760fb1b815250836111069092919063ffffffff16565b6040517fa4dfe92f0000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a4dfe92f9034906106cc9085908b908b908b9060040161190e565b60206040518083038185885af11580156106ea573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061070f919061194f565b9695505050505050565b6007546000906001600160a01b0316331461074957604051630543601560e11b8152336004820152602401610527565b6040516534b73a191a9b60d11b6020820152600090602601610549565b6006805461077390611968565b80601f016020809104026020016040519081016040528092919081815260200182805461079f90611968565b80156107ec5780601f106107c1576101008083540402835291602001916107ec565b820191906000526020600020905b8154815290600101906020018083116107cf57829003601f168201915b505050505081565b6007546000906001600160a01b0316331461082457604051630543601560e11b8152336004820152602401610527565b6040516534b73a191a9b60d11b60208201526000906026015b604051602081830303815290604052805190602001209050600061086082611081565b90506108a26040518060400160405280600381526020016219d95d60ea1b815250604051806080016040528060498152602001611ca460499139839190611106565b610908604051806040016040528060048152602001630e0c2e8d60e31b8152506040518060400160405280601181526020017f5241572c4254432c5553442c5052494345000000000000000000000000000000815250836111069092919063ffffffff16565b610953604051806040016040528060058152602001640706f7731360dc1b815250604051806040016040528060018152602001600760fb1b815250836111069092919063ffffffff16565b6040517f752f8c140000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063752f8c14906109be90849089908b908a9060040161199c565b6020604051808303816000875af11580156109dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070f919061194f565b7f0000000000000000000000000000000000000000000000000000000000000000336001600160a01b03821614610a5c5760405163073e64fd60e21b81523360048201526001600160a01b0382166024820152604401610527565b610a668383611124565b505050565b6007546001600160a01b03163314610a9857604051630543601560e11b8152336004820152602401610527565b6040517f3015394c000000000000000000000000000000000000000000000000000000008152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690633015394c90602401600060405180830381600087803b158015610b1357600080fd5b505af1158015610b27573d6000803e3d6000fd5b5050505050565b6007546000906001600160a01b03163314610b5e57604051630543601560e11b8152336004820152602401610527565b604051660ead2dce86264760cb1b602082015260009060270161083d565b6004805461077390611968565b7f0000000000000000000000000000000000000000000000000000000000000000336001600160a01b03821614610be45760405163073e64fd60e21b81523360048201526001600160a01b0382166024820152604401610527565b600180547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff8416179055505050565b6007546000906001600160a01b03163314610c5557604051630543601560e11b8152336004820152602401610527565b60405163189bdbdb60e21b602082015260009060240161083d565b6007546000906001600160a01b03163314610ca057604051630543601560e11b8152336004820152602401610527565b60405163189bdbdb60e21b60208201526000906024016040516020818303038152906040528051906020012090506000610cd982611081565b90506105ae6040518060400160405280600381526020016219d95d60ea1b8152506040518060800160405280604a8152602001611c5a604a9139839190611106565b7f0000000000000000000000000000000000000000000000000000000000000000336001600160a01b03821614610d765760405163073e64fd60e21b81523360048201526001600160a01b0382166024820152604401610527565b5060025550565b7f0000000000000000000000000000000000000000000000000000000000000000336001600160a01b03821614610dd85760405163073e64fd60e21b81523360048201526001600160a01b0382166024820152604401610527565b610a668383611130565b6007546000906001600160a01b03163314610e1257604051630543601560e11b8152336004820152602401610527565b60405164627974657360d81b602082015260009060250161083d565b6007546000906001600160a01b03163314610e5e57604051630543601560e11b8152336004820152602401610527565b60405166313cba32b9999960c91b602082015260009060270161083d565b6007546000906001600160a01b03163314610eac57604051630543601560e11b8152336004820152602401610527565b60405164627974657360d81b6020820152600090602501610549565b7f0000000000000000000000000000000000000000000000000000000000000000336001600160a01b03821614610f235760405163073e64fd60e21b81523360048201526001600160a01b0382166024820152604401610527565b6003805460ff1916831515179055505050565b6007546000906001600160a01b03163314610f6657604051630543601560e11b8152336004820152602401610527565b60405165737472696e6760d01b602082015260009060260161083d565b6007546000906001600160a01b03163314610fb357604051630543601560e11b8152336004820152602401610527565b60405166313cba32b9999960c91b6020820152600090602701610549565b6007546000906001600160a01b0316331461100157604051630543601560e11b8152336004820152602401610527565b604051660ead2dce86264760cb1b6020820152600090602701610549565b7f0000000000000000000000000000000000000000000000000000000000000000336001600160a01b0382161461107a5760405163073e64fd60e21b81523360048201526001600160a01b0382166024820152604401610527565b5060055550565b6110bf6040805160a0810182526000808252602080830182905282840182905260608084018390528451808601909552845283015290608082015290565b60008281526020819052604090205461110090829084907f00000000000000000000000000000000000000000000000000000000000000009060e01b61113c565b92915050565b608083015161111590836111c7565b6080830151610a6690826111c7565b6006610a668282611a2c565b6004610a668282611a2c565b61117a6040805160a0810182526000808252602080830182905282840182905260608084018390528451808601909552845283015290608082015290565b61118a85608001516101006111de565b50509183526001600160a01b031660208301527fffffffff0000000000000000000000000000000000000000000000000000000016604082015290565b6111d48260038351611243565b610a668282611358565b6040805180820190915260608152600060208201526111fe602083611aec565b156112265761120e602083611aec565b611219906020611b24565b6112239083611b37565b91505b506020828101829052604080518085526000815290920101905290565b60178167ffffffffffffffff161161126e576112688360e0600585901b168317611386565b50505050565b60ff8167ffffffffffffffff16116112ac57611295836018611fe0600586901b1617611386565b506112688367ffffffffffffffff831660016113ab565b61ffff8167ffffffffffffffff16116112eb576112d4836019611fe0600586901b1617611386565b506112688367ffffffffffffffff831660026113ab565b63ffffffff8167ffffffffffffffff161161132c5761131583601a611fe0600586901b1617611386565b506112688367ffffffffffffffff831660046113ab565b61134183601b611fe0600586901b1617611386565b506112688367ffffffffffffffff831660086113ab565b60408051808201909152606081526000602082015261137f838460000151518485516113d9565b9392505050565b60408051808201909152606081526000602082015261137f83846000015151846114c3565b6040805180820190915260608152600060208201526113d184856000015151858561151e565b949350505050565b60408051808201909152606081526000602082015282518211156113fc57600080fd5b602085015161140b8386611b37565b111561143e5761143e8561142e876020015187866114299190611b37565b61159f565b611439906002611b4a565b6115b6565b60008086518051876020830101935080888701111561145d5787860182525b505050602084015b6020841061149d578051825261147c602083611b37565b9150611489602082611b37565b9050611496602085611b24565b9350611465565b51815160001960208690036101000a019081169019919091161790525083949350505050565b604080518082019091526060815260006020820152836020015183106114f8576114f884856020015160026114399190611b4a565b8351805160208583010184815350808503611514576001810182525b5093949350505050565b60408051808201909152606081526000602082015260208501516115428584611b37565b1115611556576115568561142e8685611b37565b6000600161156684610100611c4d565b6115709190611b24565b90508551838682010185831982511617815250805184870111156115945783860181525b509495945050505050565b6000818311156115b0575081611100565b50919050565b81516115c283836111de565b506112688382611358565b803563ffffffff811681146115e157600080fd5b919050565b803560ff811681146115e157600080fd5b60008060006060848603121561160c57600080fd5b611615846115cd565b9250611623602085016115e6565b915060408401356001600160a01b038116811461163f57600080fd5b809150509250925092565b6000815180845260005b8181101561167057602081850181015186830182015201611654565b506000602082860101526020601f19601f83011685010191505092915050565b60208152600061137f602083018461164a565b6000806000606084860312156116b857600080fd5b833567ffffffffffffffff811681146116d057600080fd5b92506116de602085016115cd565b91506116ec604085016115e6565b90509250925092565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115611726576117266116f5565b604051601f8501601f19908116603f0116810190828211818310171561174e5761174e6116f5565b8160405280935085815286868601111561176757600080fd5b858560208301376000602087830101525050509392505050565b6000806040838503121561179457600080fd5b82359150602083013567ffffffffffffffff8111156117b257600080fd5b8301601f810185136117c357600080fd5b6117d28582356020840161170b565b9150509250929050565b6000602082840312156117ee57600080fd5b5035919050565b6000806040838503121561180857600080fd5b8235915060208301356fffffffffffffffffffffffffffffffff8116811461182f57600080fd5b809150509250929050565b6000806040838503121561184d57600080fd5b50508035926020909101359150565b6000806040838503121561186f57600080fd5b823591506020830135801515811461182f57600080fd5b805182526001600160a01b0360208201511660208301527fffffffff000000000000000000000000000000000000000000000000000000006040820151166040830152606081015160608301526000608082015160a060808501528051604060a08601526118f760e086018261164a565b9050602082015160c0860152809250505092915050565b6080815260006119216080830187611886565b63ffffffff9590951660208301525060ff9290921660408301526001600160a01b0316606090910152919050565b60006020828403121561196157600080fd5b5051919050565b600181811c9082168061197c57607f821691505b6020821081036115b057634e487b7160e01b600052602260045260246000fd5b6080815260006119af6080830187611886565b63ffffffff9590951660208301525067ffffffffffffffff92909216604083015260ff16606090910152919050565b601f821115610a6657600081815260208120601f850160051c81016020861015611a055750805b601f850160051c820191505b81811015611a2457828155600101611a11565b505050505050565b815167ffffffffffffffff811115611a4657611a466116f5565b611a5a81611a548454611968565b846119de565b602080601f831160018114611a8f5760008415611a775750858301515b600019600386901b1c1916600185901b178555611a24565b600085815260208120601f198616915b82811015611abe57888601518255948401946001909101908401611a9f565b5085821015611adc5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600082611b0957634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b8181038181111561110057611100611b0e565b8082018082111561110057611100611b0e565b6000816000190483118215151615611b6457611b64611b0e565b500290565b600181815b80851115611ba4578160001904821115611b8a57611b8a611b0e565b80851615611b9757918102915b93841c9390800290611b6e565b509250929050565b600082611bbb57506001611100565b81611bc857506000611100565b8160018114611bde5760028114611be857611c04565b6001915050611100565b60ff841115611bf957611bf9611b0e565b50506001821b611100565b5060208310610133831016604e8410600b8410161715611c27575081810a611100565b611c318383611b69565b8060001904821115611c4557611c45611b0e565b029392505050565b600061137f8383611bac56fe68747470733a2f2f6d696e2d6170692e63727970746f636f6d706172652e636f6d2f646174612f70726963656d756c746966756c6c3f6673796d733d42544320267473796d733d55534468747470733a2f2f6d696e2d6170692e63727970746f636f6d706172652e636f6d2f646174612f70726963656d756c746966756c6c3f6673796d733d425443267473796d733d555344a26469706673582212203ebc21da5fe7f4c21337a336f60954074cf8da50d35d05ef759e1939c54e492f64736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6351,
        "contract": "src/mocks/RequestResponseConsumerMock.sol:RequestResponseConsumerMock",
        "label": "sJobIdToFunctionSelector",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_bytes4)"
      },
      {
        "astId": 16029,
        "contract": "src/mocks/RequestResponseConsumerMock.sol:RequestResponseConsumerMock",
        "label": "sResponseUint128",
        "offset": 0,
        "slot": "1",
        "type": "t_uint128"
      },
      {
        "astId": 16031,
        "contract": "src/mocks/RequestResponseConsumerMock.sol:RequestResponseConsumerMock",
        "label": "sResponseInt256",
        "offset": 0,
        "slot": "2",
        "type": "t_int256"
      },
      {
        "astId": 16033,
        "contract": "src/mocks/RequestResponseConsumerMock.sol:RequestResponseConsumerMock",
        "label": "sResponseBool",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 16035,
        "contract": "src/mocks/RequestResponseConsumerMock.sol:RequestResponseConsumerMock",
        "label": "sResponseString",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 16037,
        "contract": "src/mocks/RequestResponseConsumerMock.sol:RequestResponseConsumerMock",
        "label": "sResponseBytes32",
        "offset": 0,
        "slot": "5",
        "type": "t_bytes32"
      },
      {
        "astId": 16039,
        "contract": "src/mocks/RequestResponseConsumerMock.sol:RequestResponseConsumerMock",
        "label": "sResponseBytes",
        "offset": 0,
        "slot": "6",
        "type": "t_bytes_storage"
      },
      {
        "astId": 16041,
        "contract": "src/mocks/RequestResponseConsumerMock.sol:RequestResponseConsumerMock",
        "label": "sOwner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bytes4)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes4)",
        "numberOfBytes": "32",
        "value": "t_bytes4"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      }
    }
  }
}